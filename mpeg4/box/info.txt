ftyp						*	file type and compatibility						文件类型和兼容性
pdin							progressive download information					渐进式下载信息
moov						*	container for all the metadata						所有元数据的容器
	mvhd					*	movie header, overall declarations					电影标题，整体声明
	meta						metadata								元数据
	trak					*	container for an individual track or stream				单个轨道或流的容器
		tkhd				*	track header, overall information about the track			轨道标题，有关重点的总体信息
		tref					track reference container						轨道参考容器
		trgr					track grouping indication						轨道分组指示
		edts					edit list container							编辑列表容器
			elst				an edit list								一个编辑列表
		meta					metadata								元数据
		mdia				*	container for the media information in a track				轨道中媒体信息的容器
			mdhd			*	media header, overall information about the media			媒体标题，有关媒体的总体信息
			hdlr			*	handler, declares the media (handler) type				处理程序，声明媒体(处理程序)类型
			elng				extended language tag							扩展语言标签
			minf			*	media information container						媒体信息容器
				vmhd			video media header, overall information (video track only)		视频媒体标题，总体信息(仅视频轨道)
				smhd			sound media header, overall information (sound track only)		声音媒体标题，总体信息(仅音轨轨道)
				hmhd			hint media header, overall information (hint track only)		提示媒体标题，总体信息(仅提示轨道)
				sthd			subtitle media header, overall information (subtitle track only)	字幕媒体标题，总体信息(仅字幕轨道)
				nmhd			Null media header, overall information (some tracks only)		空媒体标题，总体信息(仅某些轨道)
				dinf		*	data information box, container						数据信息盒，容器
					dref	*	data reference box, declares source(s) of media data in track		数据参考盒，在轨道中声明媒体数据的源
				stbl		*	sample table box, container for the time/space map			样品表盒，时间/空间图的容器
					stsd	*	sample descriptions (codec types, initialization etc.)			样本描述(编解码器类型，初始化等)
					stts	*	(decoding) time-to-sample						(解码)采样时间		
					ctts		(composition) time to sample						(组成)采样时间
					cslg		composition to decode timeline mapping					组合解码时间轴映射
					stsc	*	sample-to-chunk, partial data-offset information			样本到块的部分数据移位信息
					stsz		sample sizes (framing)							样本大小(框架)
					stz2		compact sample sizes (framing)						精细的样本量(框架)
					stco	*	chunk offset, partial data-offset information				块偏移量,部分数据偏移量信息
					co64		64-bit chunk offset							64位块偏移
					stss		sync sample table							同步样本表
					stsh		shadow sync sample table						阴影同步样本表
					padb		sample padding bits							样本填充位
					stdp		sample degradation priority						样品降解优先级
					sdtp		independent and disposable samples					独立和一次性样品
					sbgp		sample-to-group								样本到组
					sgpd		sample group description						样本组描述
					subs		sub-sample information							子样本信息
					saiz		sample auxiliary information sizes					样本辅助信息大小
					saio		sample auxiliary information offsets					样本辅助信息偏移
		udta					user-data								用户数据
	mvex						movie extends box							电影扩展盒
		mehd					movie extends header box						电影扩展媒体盒
		trex				*	track extends defaults							轨道扩展默认值
		leva					level assignment							等级分配
moof							movie fragment								电影片段
	mfhd					*	movie fragment header							电影片段标题
	meta						metadata								元数据
	traf						track fragment								轨道片段
		tfhd				*	track fragment header							轨道片段标题
		trun					track fragment run							轨道片段运行
		sbgp					sample-to-group								样本到组
		sgpd					sample group description						样本组描述
		subs					sub-sample information							子样本信息
		saiz					sample auxiliary information sizes					样本辅助信息大小
		saio					sample auxiliary information offsets					样本辅助信息偏移
		tfdt					track fragment decode time						轨道片段解码时间
		meta					metadata								元数据
mfra							movie fragment random access						电影片段随机访问
	tfra						track fragment random access						轨道片段随机访问
	mfro					*	movie fragment random access offset					电影片段随机访问偏移
	mdat						media data container							媒体数据容器
	free						free space								自由空间
	skip						free space								自由空间
		udta					user-data								用户数据
			cprt				copyright etc.								版权等
			tsel				track selection box							轨道选择盒
			strk				sub track box								子轨道盒
				stri			sub track information box						子轨道信息盒
				strd			sub track definition box						子轨道定义盒
meta							metadata								元数据
	hdlr					*	handler, declares the metadata (handler) type				处理程序，声明元数据(处理程序)类型
	dinf						data information box, container						数据信息盒，容器
		dref					data reference box, declares source(s) of metadata items		数据参考盒，声明元数据项的来源
	iloc						item location								项目位置
	ipro						item protection								项目保护
		sinf					protection scheme information box					保护方案信息盒
			frma				original format box							原始格式盒
			schm				scheme type box								计划类型盒
			schi				scheme information box							计划信息盒
	iinf						item information							项目信息
	xml						XML container								xml 容器
	bxml						binary XML container							二进制 xml 容器
	pitm						primary item reference							主要项目参考
	fiin						file delivery item information						文件传递项目信息
		paen					partition entry								分区条目
			fire				file reservoir								文件库
			fpar				file partition								文件分区
			fecr				FEC reservoir								FEC 库
		segr					file delivery session group						文件传递会话组
		gitn					group id to name							组ID命名
	idat						item data								项目数据
	iref						item reference								项目参考
meco							additional metadata container						额外的元数据容器
	mere						metabox relation							元数据盒子关系
		meta					metadata								元数据
styp							segment type								片段类型
sidx							segment index								片段索引
ssix							subsegment index							子片段索引
prft							producer reference time							制作者参考时间

=====
$Box:
	uint32_t size;
	uint32_t type;
	if (size == 1)
		uint64_t large_size;
	else if (size == 0)
		; // box extends to end of file
	if (type == 'uuid')
		uint8_t usertype[16];

$FullBox:
	$Box box;
	uint8_t version;
	bit flags[24];

ftyp (file)* [1]:
$FileTypeBox:
	$Box box(type = 'ftyp');
	uint32_t major_brand;
	uint32_t minor_version;
	uint32_t compatible_brands[];

mdat (file)  [0+]:
$MediaDataBox:
	$Box box(type = 'mdat');
	uint8_t data[];

free (file|other)  [0+]:
skip (file|other)  [0+]:
$FreeSpaceBox:
	$Box box(type = 'free'|'skip');
	uint8_t data[];

moov (file)* [1]:
$MovieBox:
	$Box box(type = 'moov');
	...

mvhd ('moov')* [1]:
$MovieHeaderBox:
	$FullBox fullbox(box.type = 'mvhd', version = 0|1, flags = 0);
	if (version == 1)
	{
		uint64_t creation_time;
		uint64_t modification_time;
		uint32_t timescale;
		uint64_t duration;
	}
	else if (version == 0)
	{
		uint32_t creation_time;
		uint32_t modification_time;
		uint32_t timescale;
		uint32_t duration;
	}
	fix16.16 rate; // maybe 1.0
	fix8.8 volume; // maybe 1.0
	uint16_t reserved = 0;
	uint32_t reserved[2] = 0;
	fix32 matrix[9] = {
		a, b, u,
		c, d, v,
		x, y, w
	};
	// fix16.16 a, b, c, d, x, y;
	// fix2.30 u, v, w;
	// maybe E
	uint32_t pre_defined[6] = 0;
	uint32_t next_track_id;

trak ('moov')* [1+]:
$TrackBox:
	$Box box(type = 'trak');
	...

tkhd ('trak')* [1]:
$TrackHeaderBox:
	$FullBox fullbox(box.type = 'tkhd', version = 0|1, flags =
		track_enabled              (0x000001) |
		track_in_movie             (0x000002) |
		track_in_preview           (0x000004) |
		track_size_is_aspect_ratio (0x000008)
	);
	if (version == 1)
	{
		uint64_t creation_time;
		uint64_t modification_time;
		uint32_t track_ID;
		uint32_t reserved = 0;
		uint64_t duration;
	}
	else if (version == 0)
	{
		uint32_t creation_time;
		uint32_t modification_time;
		uint32_t track_ID;
		uint32_t reserved = 0;
		uint32_t duration;
	}
	uint32_t reserved[2] = 0;
	int16_t layer;           // maybe 0
	int16_t alternate_group; // maybe 0
	fix8.8 volume;           // maybe (1.0 at audio | 0.0 at other)
	uint16_t reserved = 0;
	fix32 matrix[9] = {
		a, b, u,
		c, d, v,
		x, y, w
	};
	// fix16.16 a, b, c, d, x, y;
	// fix2.30 u, v, w;
	// maybe E
	uint32_t width;
	uint32_t height;

edts ('trak')  [0|1]:
$EditBox:
	$Box box(type = 'edts');
	...

elst ('edts')  [0|1]:
$EditListBox:
	$FullBox fullbox(box.type = 'elst', version = 0|1, flags = 0);
	uint32_t entry_count;
	for (i = 0; i < entry_count; ++i)
	{
		if (version == 1)
		{
			uint64_t segment_duration;
			int64_t media_time;
		}
		else (version == 0)
		{
			uint32_t segment_duration;
			int32_t media_time;
		}
		int16_t media_rate_integer;
		int16_t media_rate_fraction = 0;
	}

mdia ('trak')* [1]:
$MediaBox:
	$Box box(type = 'mdia');
	...

mdhd ('mdia')* [1]:
$MediaHeaderBox:
	$FullBox fullbox(box.type = 'mdhd', version = 0|1, flags = 0);
	if (version == 1)
	{
		uint64_t creation_time;
		uint64_t modification_time;
		uint32_t timescale;
		uint64_t duration;
	}
	else if (version == 0)
	{
		uint32_t creation_time;
		uint32_t modification_time;
		uint32_t timescale;
		uint32_t duration;
	}
	bit pad = 0;
	uint5_t language[3];
	uint16_t pre_defined = 0;

hdlr ('mdia'|'meta')* [1]:
$HandlerBox:
	$FullBox fullbox(box.type = 'hdlr', version = 0, flags = 0);
	uint32_t pre_defined = 0;
	uint32_t handler_type;
	uint32_t reserved[3] = 0;
	char name[];

elng ('mdia')  [0|1]:
$ExtendedLanguageBox:
	$FullBox fullbox(box.type = 'elng', version = 0, flags = 0);
	char extended_language[];

minf ('mdia')* [1]:
$MediaInformationBox:
	$Box box(type = 'minf');
	...

nmhd ('minf')* [1?]:
$NullMediaHeaderBox:
	$FullBox fullbox(box.type = 'nmhd', version = 0, flags);

vmhd ('minf')* [1?]:
$VideoMediaHeaderBox:
	$FullBox fullbox(box.type = 'vmhd', version = 0, flags = 1);
	uint16_t graphicsmode;  // maybe 0
	uint16_t opcolor[3];    // maybe {0, 0, 0}

smhd ('minf')* [1?]:
$SoundMediaHeaderBox:
	$FullBox fullbox(box.type = 'smhd', version = 0, flags = 0);
	fix8.8 balance;  // maybe 0
	uint16_t reserved = 0; 

dinf ('minf'*|'meta')  [1]:
$MediaInformationBox:
	$Box box(type = 'dinf');
	...

dref ('dinf')* [1]:
$DataReferenceBox:
	$FullBox fullbox(box.type = 'dref', version = 0, flags = 0);
	uint32_t entry_count;
	...

url  ('dref')* [1?+]:
$DataEntryUrlBox:
	$FullBox fullbox(box.type = 'url ', version = 0, flags);
	char location[];

urn  ('dref')* [1?+]:
$DataEntryUrnBox:
	$FullBox fullbox(box.type = 'urn ', version = 0, flags);
	char name[];
	char location[];

stbl ('minf')* [1]:
$SampleTableBox:
	$Box box(type = 'stbl');
	...

stsd ('stbl')* [1]:
$SampleEntry:
	$Box box(type);
	uint8_t reserved[6] = 0;
	uint16_t data_reference_index;

$VisualSampleEntry:
	$SampleEntry(type);
	uint16_t pre_defined = 0;
	uint16_t reserved = 0;
	uint32_t pre_defined[3] = 0;
	uint16_t width;
	uint16_t height;
	fix16.16 horizre_solution; // maybe 72 ppi
	fix16.16 vertre_solution;  // maybe 72 ppi
	uint32_t reserved = 0;
	uint16_t frame_count;      // maybe 1
	char compressor_name[32];
	uint16_t depth;            // maybe 24
	int16_t pre_defined = -1;
	...
}

$AudioSampleEntry:
	$SampleEntry(type);
	uint16_t entry_version;   // 0 | 1
	uint16_t reserved[3] = 0;
	uint16_t channel_count;   // maybe 2
	uint16_t sample_size;     // maybe 16
	uint16_t pre_defined = 0;
	uint16_t reserved = 0;
	fix16.16 sample_rate;     // maybe 1
	...
}

$BitRateBox:
	$Box box(type = 'btrt');
	uint32_t buffer_size_db;
	uint32_t max_bitrate;
	uint32_t avg_bitrate;

$SampleDescriptionBox:
	$FullBox fullbox(box.type = 'stsd', version, flags = 0);
	uint32_t entry_count;
	...

stdp ('stbl')  [0|1]:
$DegradationPriorityBox:
	$FullBox fullbox(box.type = 'stdp', version = 0, flags = 0);
	uint16_t priority[sample_count];

stts ('stbl')* [1]:
$TimeToSampleBox:
	$FullBox fullbox(box.type = 'stts', version = 0, flags = 0);
	uint32_t entry_count;
	for (i = 0; i < entry_count; ++i)
	{
		uint32_t sample_count;
		uint32_t sample_delta;
	}

ctts ('stbl')  [0|1]:
$CompositionOffsetBox:
	$FullBox fullbox(box.type = 'ctts', version = 0|1, flags = 0);
	uint32_t entry_count;
	if (version == 0)
	{
		for (i = 0; i < entry_count; ++i)
		{
			uint32_t sample_count;
			uint32_t sample_offset;
		}
	}
	else if (version == 1)
	{
		for (i = 0; i < entry_count; ++i)
		{
			uint32_t sample_count;
			int32_t sample_offset;
		}
	}

cslg ('stbl'|'trep')  [0|1]:
$CompositionToDecodeBox:
	$FullBox fullbox(box.type = 'cslg', version = 0|1, flags = 0);
	if (version == 0)
	{
		int32_t composition_to_dts_shift;
		int32_t least_decode_to_display_delta;
		int32_t greatest_decode_to_display_delta;
		int32_t composition_start_time;
		int32_t composition_end_time;
	}
	else if (version == 1)
	{
		int64_t composition_to_dts_shift;
		int64_t least_decode_to_display_delta;
		int64_t greatest_decode_to_display_delta;
		int64_t composition_start_time;
		int64_t composition_end_time;
	}

stss ('stbl')  [0|1]:
$SyncSampleBox:
	$FullBox fullbox(box.type = 'stss', version = 0, flags = 0);
	uint32_t entry_count;
	for (i = 0; i < entry_count; ++i)
		uint32_t sample_number;

stsh ('stbl')  [0|1]:
$ShadowSyncSampleBox:
	$FullBox fullbox(box.type = 'stsh', version = 0, flags = 0);
	uint32_t entry_count;
	for (i = 0; i < entry_count; ++i)
	{
		uint32_t shadowed_sample_number;
		uint32_t sync_sample_number;
	}

sdtp ('stbl')  [0|1]:
$SampleDependencyTypeBox:
	$FullBox fullbox(box.type = 'sdtp', version = 0, flags = 0);
	for (i = 0; i < sample_count; ++i)
	{
		uint2_t is_leading;
		uint2_t sample_depends_on;
		uint2_t sample_is_depended_on;
		uint2_t sample_has_redundancy;
	}

stsz ('stbl')* [1?]:
$SampleSizeBox:
	$FullBox fullbox(box.type = 'stsz', version = 0, flags = 0);
	uint32_t sample_size;
	uint32_t sample_count;
	if (!sample_size)
	{
		for (i = 0; i < sample_count; ++i)
			uint32_t entry_size;
	}

stz2 ('stbl')* [1?]:
$SampleSizeBox:
	$FullBox fullbox(box.type = 'stz2', version = 0, flags = 0);
	uint24_t reserved = 0;
	uint8_t field_size;
	uint32_t sample_count;
	for (i = 0; i < sample_count; ++i)
		bit entry_size[field_size];

stsc ('stbl')* [1]:
$SampleToChunkBox:
	$FullBox fullbox(box.type = 'stsc', version = 0, flags = 0);
	uint32_t entry_count;
	for (i = 0; i < entry_count; ++i)
	{
		uint32_t first_chunk;
		uint32_t samples_per_chunk;
		uint32_t sample_description_index;
	}

stco ('stbl')* [1?]:
$ChunkOffsetBox:
	$FullBox fullbox(box.type = 'stco', version = 0, flags = 0);
	uint32_t entry_count;
	for (i = 0; i < entry_count; ++i)
		uint32_t chunk_offset; // by file

co64 ('stbl')* [1?]:
$ChunkLargeOffsetBox:
	$FullBox fullbox(box.type = 'co64', version = 0, flags = 0);
	uint32_t entry_count;
	for (i = 0; i < entry_count; ++i)
		uint64_t chunk_offset; // by file

avc1
av01
mp4a

sbgp ('stbl'|'traf')  [0+]:
$SampleToGroupBox:
	$FullBox fullbox(box.type = 'sbgp', version = 0|1, flags = 0);
	uint32_t grouping_type;
	if (version == 1)
		uint32_t grouping_type_parameter;
	uint32_t entry_count;
	for (i = 0; i < entry_count; ++i)
	{
		uint32_t sample_count;
		uint32_t group_description_index;
	}

sgpd ('stbl'|'traf')  [0+]:
$SampleGroupDescriptionBox:
	$FullBox fullbox(box.type = 'sgpd', version = 0|1|2, flags = 0);
	uint32_t grouping_type;
	if (version == 1)
		uint32_t default_length; // 0 || const length
	if (version == 2)
		uint32_t default_sample_description_index;
	uint32_t entry_count;
	for (i = 0; i < entry_count; ++i)
	{
		if (version == 1 && default_length == 0)
			uint32_t description_length;
		uint8_t entry[];
	}


udta ('moov'|'trak'|'moof'|'traf')  [0|1]:
$UserDataBox:
	$Box box(type = 'udta');
	...

