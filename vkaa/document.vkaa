# keyword complete
	var `type_parse` `list`;
		`type_parse`:
			< `type_name` >
			<? `var_name` >
		`list`:
			`var_define` , `var_define` ...
				`var_define`:
					`var_name`
					`var_name` ( `initial` )

	marco `marco_name` `marco_param` `marco_code`
		`marco_param`:
			( `var_name` , `var_name` ... )
		`marco_code`:
			{ `code` }

	func `type_parse` `func_name` `func_param` `func_define`
		`func_param`:
			( `type_name` `var_name` , `type_name` `var_name` ... )
		`func_define`:
			;
			{ `code` }
			[ `stack_size` ] { `code` }
				`stack_size`: number(>0), default(1)

	label `label_name` :
	unlabel `label_name` ;
	goto `label_name` ;
	break ;
	continue ;

	return `value`
		`value`:
			;
			`code` ;
				`code`: code's var as return value

	if `condition` `tail`
		`tail`:
			`done`
			`done` else `done`
			`done` else if `condition` `tail`
	while `condition` `done`
	do `done` while `condition` ;
	for ( `code-initial` ; `condition` ; `code-finally` ) `done`
		`condition`:
			( `code` )
				`code`: code's var must convert bool
		`done`:
			`code` ;
			{ `code` }

# keyword inner
	null
		=> type(null)
	true
		=> type(bool)
	false
		=> type(bool)
	refer_type `type_parse` ( `exec` )
		=> type(refer)
	& `exec_syntax_once`
		=> type(refer)

# type
	void
	null
	scope
		!     (bool)         => bool  : any
		~     (uint)         => uint  : any
		*     (uint, uint)   => uint  : any
		*     (int, int)     => int   : any
		*     (float, float) => float : any
		/     (uint, uint)   => uint  : any
		/     (int, int)     => int   : any
		/     (float, float) => float : any
		%     (uint, uint)   => uint  : any
		%     (int, int)     => int   : any
		%     (float, float) => float : any
		+     (uint, uint)   => uint  : any
		+     (int, int)     => int   : any
		+     (float, float) => float : any
		+     (uint)         => uint  : any
		+     (int)          => int   : any
		+     (float)        => float : any
		-     (uint, uint)   => uint  : any
		-     (int, int)     => int   : any
		-     (float, float) => float : any
		-     (uint)         => uint  : any
		-     (int)          => int   : any
		-     (float)        => float : any
		&     (bool, bool)   => bool  : any
		&     (uint, uint)   => uint  : any
		&     (int, int)     => int   : any
		|     (bool, bool)   => bool  : any
		|     (uint, uint)   => uint  : any
		|     (int, int)     => int   : any
		^     (bool, bool)   => bool  : any
		^     (uint, uint)   => uint  : any
		^     (int, int)     => int   : any
		&&pre (bool)         => bool  : input_first
		&&    (bool, bool)   => bool  : any
		||pre (bool)         => bool  : input_first
		||    (bool, bool)   => bool  : any
		^^    (bool, bool)   => bool  : any
		<<    (uint, uint)   => uint  : any
		<<    (int, int)     => int   : any
		>>    (uint, uint)   => uint  : any
		>>    (int, int)     => int   : any
		==    (bool, bool)   => bool  : any
		==    (uint, uint)   => bool  : any
		==    (int, int)     => bool  : any
		==    (float, float) => bool  : any
		!=    (bool, bool)   => bool  : any
		!=    (uint, uint)   => bool  : any
		!=    (int, int)     => bool  : any
		!=    (float, float) => bool  : any
		>     (uint, uint)   => bool  : any
		>     (int, int)     => bool  : any
		>     (float, float) => bool  : any
		<     (uint, uint)   => bool  : any
		<     (int, int)     => bool  : any
		<     (float, float) => bool  : any
		>=    (uint, uint)   => bool  : any
		>=    (int, int)     => bool  : any
		>=    (float, float) => bool  : any
		<=    (uint, uint)   => bool  : any
		<=    (int, int)     => bool  : any
		<=    (float, float) => bool  : any
		=     (void, void)   => void  : must_first
		=     (null, null)   => null  : must_first
		=     (bool, bool)   => bool  : must_first
		=     (uint, uint)   => uint  : must_first
		=     (int, int)     => int   : must_first
		=     (float, float) => float : must_first
		+=    (uint, uint)   => uint  : must_first
		+=    (int, int)     => int   : must_first
		+=    (float, float) => float : must_first
		-=    (uint, uint)   => uint  : must_first
		-=    (int, int)     => int   : must_first
		-=    (float, float) => float : must_first
		*=    (uint, uint)   => uint  : must_first
		*=    (int, int)     => int   : must_first
		*=    (float, float) => float : must_first
		/=    (uint, uint)   => uint  : must_first
		/=    (int, int)     => int   : must_first
		/=    (float, float) => float : must_first
		%=    (uint, uint)   => uint  : must_first
		%=    (int, int)     => int   : must_first
		%=    (float, float) => float : must_first
		&=    (bool, bool)   => bool  : must_first
		&=    (uint, uint)   => uint  : must_first
		&=    (int, int)     => int   : must_first
		|=    (bool, bool)   => bool  : must_first
		|=    (uint, uint)   => uint  : must_first
		|=    (int, int)     => int   : must_first
		^=    (bool, bool)   => bool  : must_first
		^=    (uint, uint)   => uint  : must_first
		^=    (int, int)     => int   : must_first
		<<=   (uint, uint)   => uint  : must_first
		<<=   (int, int)     => int   : must_first
		>>=   (uint, uint)   => uint  : must_first
		>>=   (int, int)     => int   : must_first
	syntax
	marco
	function
		(*...) => * : any
	refer
		=  (refer, refer) => refer : must_first
		:= (refer, *)     => refer : must_first
		*  ()             => *     : any
	string
		=     (string, string) => string : must_first
		bytes ()               => bytes  : any
	bool
		string () => string : any
		bool   () => bool   : any
		uint   () => uint   : any
		int    () => int    : any
		float  () => float  : any
	uint
		string () => string : any
		bool   () => bool   : any
		uint   () => uint   : any
		int    () => int    : any
		float  () => float  : any
	int
		string () => string : any
		bool   () => bool   : any
		uint   () => uint   : any
		int    () => int    : any
		float  () => float  : any
	float
		string () => string : any
		bool   () => bool   : any
		uint   () => uint   : any
		int    () => int    : any
		float  () => float  : any
	bytes
		=      (bytes, bytes)        => bytes  : must_first
		string ()                    => string : any
		clear  ()                    => bytes  : this
		append ([string | bytes]...) => bytes  : this
