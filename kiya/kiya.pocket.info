: tag = "kiya"

# kiya layer (必须)
[$ "kiya"]
	"name" @string => ""                      # 全局唯一 id

# kiya 依赖列表 (可选)
[$ "kiya" "like"]
	"kiya-1" @null
	"kiya-2" @null
	# ...

# kiya 执行器 (可选)
[$ "kiya" "dylink"]
	"lib?.so" @index                          # 加载动态库(导入到自用的符号池)
		# "symbol" @null                        将 so 中 "symbol" 映射成 "symbol"
		# "symbol" @string => "symbol.mapping"  将 so 中 "symbol" 映射成 "symbol.mapping"
		# ...
	"dylink-1" @"dylink" => &"dylink-1.dy"    # dylink 文件，名称无所谓, tag 必须是 "dylink"
	"dylink-2" @"dylink" => &"dylink-2.dy"    # 可以有多个，所有的公共符号将导入到该 kiya 自用的符号池，而不会自动导出到公用的符号池
	# ...

# kiya 解析器列表 (可选)
[$ "kiya" "parse"]
	"parse-id-1" @null                        # 将调用 parse-id-1([])
	"parse-id-2" @string => "user-index-name" # 将调用 parse-id-1(["user-index-name"])
	# ...

# kiya 执行器预定义符号
# initial finally 能够保证互斥执行
[$ "kiya"]
	# const char* initial(uintptr_t argc, const char *argv[])
	# void finally(void)
	"initial" @string => "init"               # 初始化执行(在解析器执行之后，在加载下一个 kiya pocket 之前), argv[0] == [$ "kiya" "name"]
	"finally" @string => "uini"               # 终止化执行(在最后按照加载顺序倒序执行)

# kiya 预定义内容
symbol:
	$tag     ((hashmap_t *) => (kiya_tag_f))         类型映射池
	$parse   ((hashmap_t *) => (kiya_parse_f))       解析映射池
	$symbol  ((hashmap_t *) => (dylink_pool_t *))    符号映射池
	malloc
	calloc
	realloc
	free
parse:
	"kiya.export"                                    将本地符号池的符号映射到公共符号池
		[root] "kiya.export" @"kiya.export.all"  导出全部符号
		[root "kiya.export"]                     导出指定符号
			"symbol" @null
			"src-symbol" @string => "dst-symbol"
			# ...
